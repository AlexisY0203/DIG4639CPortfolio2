{"version":3,"sources":["Home.jsx","Exercises.jsx","Random.jsx","ToDo.jsx","ExerciseQuiz.jsx","App.js"],"names":["exercisesList","key","activityName","activityDetails","suggestedName","suggestedDetails","Home","navigation","View","style","styles","container","Text","FlatList","data","renderItem","item","index","title","onPress","navigate","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","Exercises","route","React","useState","count","setCount","params","randomExercises","Random","randomNumber","setRandomNumber","Math","floor","random","length","ToDo","description","completed","defaultTask","setDefaultTask","completeTask","updated","map","newTask","setNewTask","h3","checked","onIconPress","placeholder","onChangeText","value","addedUserTask","questions","question","solution","ExerciseQuiz","userOption","setUserOption","userSolution","setUserSolution","Pressable","selected","notSelected","choices","fontSize","color","textAlign","margin","borderRadius","padding","Stack","createStackNavigator","App","NavigationContainer","Navigator","Screen","name","component","StatusBar"],"mappings":"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","file":"static/js/app.4e982e73.chunk.js","sourcesContent":["import React from 'react';\r\nimport {View, Text, FlatList} from 'react-native';\r\nimport {Button} from 'react-native-elements';\r\nimport { StyleSheet } from 'react-native';\r\n\r\nlet exercisesList = [\r\n    {\r\n        key: 1,\r\n        activityName: \"Situps\",\r\n        activityDetails: \"Lay on your back and lift your toro to your knees.\",\r\n        suggestedName: 'V-Sit and Reach',\r\n        suggestedDetails: 'Sit with legs in v shape and reach for toes.',\r\n    },\r\n    {\r\n        key: 2,\r\n        activityName: \"Pushups\",\r\n        activityDetails: \"Get in a prone position then raise and lower your body.\",\r\n        suggestedName: 'Pullups',\r\n        suggestedDetails: 'Hold an overhead bar and lift body.',\r\n    },\r\n    {\r\n        key: 3,\r\n        activityName: \"Squats\",\r\n        activityDetails: \"Lower your hips from a standing position then stand back up.\",\r\n        suggestedName: 'Lunges',\r\n        suggestedDetails: 'Step forward with one leg lowering toward the ground, return back up and repeat with other leg.',\r\n    }\r\n]\r\n\r\nexport default function Home({navigation}) {\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text>1. Choose a Warm Up Exercise to Begin</Text>\r\n            <FlatList data={exercisesList} renderItem={\r\n                ({item, index}) => <Button key={index} title={item.activityName} onPress={() =>\r\n                    (navigation.navigate('Exercises', {\r\n                        key: item.key,\r\n                        activityName: item.activityName,\r\n                        activityDetails: item.activityDetails,\r\n                        suggestedName: item.suggestedName,\r\n                        suggestedDetails: item.suggestedDetails,\r\n                    }))\r\n                } />\r\n            }></FlatList>\r\n            <Text>2. Can't Decide? Find a Randomized Exercise</Text>\r\n            <Button title=\"Random Exercises\" onPress={() => navigation.navigate('Random')}></Button>\r\n            <Text>3. What Kind of Exercises Do You Like?</Text>\r\n            <Button title=\"Exercise Quiz\" onPress={() => navigation.navigate('ExerciseQuiz')}></Button>\r\n            <Text>4. Create Your Own Exercise To-Do List</Text>\r\n            <Button title=\"Create ToDo\" onPress={() => navigation.navigate('ToDo')}></Button>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#C5DCBC',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n  });\r\n\r\n","import React from 'react';\r\nimport {View, Text} from 'react-native';\r\nimport {Button} from 'react-native-elements';\r\nimport { StyleSheet } from 'react-native';\r\n\r\n\r\nexport default function Exercises({route, navigation}) {\r\n    let [count, setCount] = React.useState(0);\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text>Exercise Name: {route.params.activityName}</Text>\r\n            <Text>Exercise Description: {route.params.activityDetails}</Text>\r\n            <Text>Count below to 3 sets of 10 reps!</Text>\r\n            <Text>Count: {count}</Text>\r\n            <Text>\r\n                <Button title=\"Add\" onPress={() => setCount(count + 1)}></Button>\r\n                <Button title=\"Reset\" onPress={() => setCount(0)}></Button>\r\n            </Text>\r\n            {!!route.params.suggestedName && <>\r\n            <Text>Now follow up with this exercise for more training: </Text>\r\n            <Button title={route.params.suggestedName} onPress={() => {\r\n                setCount(0);\r\n                navigation.navigate('Exercises', {\r\n                    activityName: route.params.suggestedName,\r\n                    activityDetails: route.params.suggestedDetails,\r\n                });\r\n            }} />\r\n            </>}\r\n            <Button title=\"Back to Home\" onPress={() => navigation.navigate('Home')}></Button>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#C4D4D3',\r\n      alignItems: 'center',\r\n    },\r\n  });\r\n","import {React, useState} from 'react';\r\nimport {View, Text} from 'react-native';\r\nimport {Button} from 'react-native-elements';\r\nimport { StyleSheet } from 'react-native';\r\n\r\nlet randomExercises = [\"Situps\", \"Pushups\",\"Squats\", \"V-Sit and Reach\", \"Pull Ups\", \"Lunges\",\r\n    \"Mile Run\", \"Pool Laps\", \"Plank\", \"Mountain Climbers\", \"Russian Twists\", \"Step Ups\"];\r\n\r\n\r\nexport default function Random({navigation}) {\r\n    let [randomNumber, setRandomNumber] = useState(-1)\r\n    let getRandomNumber = () => {\r\n        let randomNumber = Math.floor(Math.random() * randomExercises.length);\r\n        setRandomNumber(randomNumber)\r\n    }\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text>Choose a random exercise here!</Text>\r\n            <Text>Just press the button, and be presented a random exercise to begin.</Text>\r\n            <Button title=\"Randomize\" onPress={getRandomNumber}></Button>\r\n            <Text>Your Random Exercise Is:</Text>\r\n            <Text>{randomExercises[randomNumber]}</Text>\r\n            <Button title=\"Back to Home\" onPress={() => navigation.navigate('Home')}></Button>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#BCC5DC',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n  });","import {React, useState} from 'react';\r\nimport {View, Text, FlatList} from 'react-native';\r\nimport {Button, Input, CheckBox} from 'react-native-elements';\r\nimport { StyleSheet } from 'react-native';\r\n\r\nexport default function ToDo({navigation}) {\r\n    let [defaultTask, setDefaultTask] = useState([\r\n        {\r\n          key: \"1\",\r\n          description: \"Start To Do List\",\r\n          completed: false,\r\n        }\r\n      ])\r\n      //Renders when task is completed\r\n      let completeTask = (key) => {\r\n        let updated = defaultTask = defaultTask.map((defaultTask) => {\r\n          if (defaultTask.key === key) {\r\n            return {\r\n              key: defaultTask.key,\r\n              description: defaultTask.description,\r\n              completed: !defaultTask.completed\r\n            }\r\n          } else {\r\n            return defaultTask;\r\n          }\r\n        });\r\n          setDefaultTask(updated)\r\n      }\r\n      //Array to store new tasks from user input\r\n      let [newTask, setNewTask] = useState(\"\")\r\n      //Gives user input tasks the same properties with keys adding after the default and false completed\r\n      let userTask = () => {\r\n        if (newTask === '') return;\r\n        let lastItemKey = defaultTask[defaultTask.length - 1].key;\r\n        let addedUserTask = {\r\n          key: lastItemKey + 1,\r\n          description: newTask,\r\n          completed: false\r\n        };\r\n        setDefaultTask([...defaultTask, addedUserTask]);\r\n        setNewTask('');\r\n      }\r\n      //Renders tasks on screen\r\n      let renderItem = ({ item }) => {\r\n        return <CheckBox \r\n          key={item.key} \r\n          title={item.description}\r\n          checked={item.completed}\r\n          onIconPress={() => completeTask(item.key)}\r\n          onPress={() => completeTask(item.key)}>\r\n        </CheckBox>\r\n      }\r\n      return (\r\n        <View style={styles.container}>\r\n          <Text h3>Fitness Plan:</Text>\r\n          <FlatList data={defaultTask} renderItem={renderItem}></FlatList>\r\n          <Input \r\n            placeholder=\"New Task\"\r\n            onChangeText={setNewTask}\r\n            value={newTask}\r\n          ></Input>\r\n          <Button \r\n            title=\"Add\"\r\n            onPress={userTask}\r\n          ></Button>\r\n          <Button title=\"Back to Home\" onPress={() => navigation.navigate('Home')}></Button>\r\n        </View>)\r\n    }\r\n    \r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#DCBCC5',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n  });","import React, { useState } from 'react';\r\nimport {View, Text, FlatList, Pressable} from 'react-native';\r\nimport {Button} from 'react-native-elements';\r\nimport { StyleSheet } from 'react-native';\r\n\r\nlet questions = [\r\n    {\r\n        key: 1, \r\n        question: \"Strength\",\r\n        solution: \"Weight Training\"\r\n    },\r\n    {\r\n        key: 2, \r\n        question: \"Flexibility\",\r\n        solution: \"Yoga\"\r\n    },\r\n    {\r\n        key: 3, \r\n        question: \"Endurance\",\r\n        solution: \"Running/Swimming\"\r\n    }\r\n]\r\n\r\nexport default function ExerciseQuiz({navigation}) {\r\n    let [userOption, setUserOption] = useState(null);\r\n    let [userSolution, setUserSolution] = useState(null);\r\nreturn (\r\n    <View style={styles.container}>\r\n        <Text>Choose your main goal in exercising:</Text>\r\n        <FlatList data={questions} renderItem={({item, index}) => \r\n            <Pressable\r\n                style={item.question === userOption ? styles.selected : styles.notSelected} \r\n                onPress={() => (setUserOption(item.question), setUserSolution(item.solution))}>\r\n                <Text key={index} style={styles.choices}>{item.question}</Text>\r\n            </Pressable>}>\r\n        </FlatList>\r\n        <Text>You chose: {userOption}</Text>\r\n        <Text>Your type of Exercise should be: {userSolution}</Text>\r\n        <Button title=\"Back to Home\" onPress={() => navigation.navigate('Home')}></Button>\r\n    </View>\r\n)\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#DCC5AD',\r\n      alignItems: 'center',\r\n    },\r\n    choices: {\r\n        fontSize: 15,\r\n        color: 'black',\r\n        textAlign: 'center',\r\n    },\r\n    notSelected: {\r\n        backgroundColor: 'white',\r\n        margin: 5,\r\n        borderRadius: 5,\r\n    },\r\n    selected: {\r\n        backgroundColor: '#EDD892',\r\n        margin: 6,\r\n        padding: 7,\r\n        borderRadius: 7,\r\n    },\r\n  });","import 'react-native-gesture-handler';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet } from 'react-native';\nimport Home from './Home.jsx';\nimport Exercises from './Exercises.jsx';\nimport Random from './Random.jsx';\nimport ToDo from './ToDo.jsx';\nimport ExerciseQuiz from './ExerciseQuiz.jsx';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={Home} />\n        <Stack.Screen name=\"Exercises\" component={Exercises} />\n        <Stack.Screen name=\"Random\" component={Random} />\n        <Stack.Screen name=\"ExerciseQuiz\" component={ExerciseQuiz} />\n        <Stack.Screen name=\"ToDo\" component={ToDo} />\n      </Stack.Navigator>\n      <StatusBar style=\"auto\" />\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}